datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int      @id @default(autoincrement())
  name          String
  username      String   @unique
  email         String   @unique
  password_hash String   @map("password_hash")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  wallets       Wallet[]
  categories    Category[]
  creditCards   CreditCard[]
  installmentPurchases  InstallmentPurchase[]
}

model Wallet {
  id              Int      @id @default(autoincrement())
  name            String
  type            String   
  initial_balance Decimal  @default(0) @map("initial_balance")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId Int  @map("user_id") 
}

model Category {
  id                 Int       @id @default(autoincrement())
  name               String    
  type               String?   
  is_system_category Boolean   @default(false) @map("is_system_category")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId Int?  @map("user_id")

  installmentPurchases InstallmentPurchase[] 
}

model CreditCard {
  id               Int       @id @default(autoincrement())
  name             String    
  limit            Decimal   
  due_day          Int       
  closing_day      Int       
  brand            String?   
  last_four_digits String?   @map("last_four_digits") 

  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @map("user_id") 

  installmentPurchases InstallmentPurchase[] 
}

model InstallmentPurchase {
  id                         Int      @id @default(autoincrement())
  description                String
  total_amount               Decimal  @map("total_amount")
  number_of_installments     Int      @map("number_of_installments")
  purchase_date              DateTime 
  first_installment_bill_month Int      @map("first_installment_bill_month") 
  first_installment_bill_year  Int      @map("first_installment_bill_year")  
  notes                      String?  

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("user_id")

  creditCard CreditCard @relation(fields: [creditCardId], references: [id], onDelete: Restrict)
  creditCardId Int      @map("credit_card_id")

  category  Category   @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  categoryId Int        @map("category_id")
}
